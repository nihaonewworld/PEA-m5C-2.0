package windowMain;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.EventQueue;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.border.EmptyBorder;
import javax.swing.filechooser.FileNameExtensionFilter;

import feature.CutOutSequence;
import feature.RNA_Object;
import feature.ReadFile;
import feature.RunRNAfold;
import run.ResultData;
import run.RunProgram;

import javax.swing.JTextArea;
import javax.swing.JFileChooser;

import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.URI;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.awt.event.ActionListener;
import javax.swing.ButtonGroup;

/**
 * 
 * @author QiangCao
 *
 */
public class Win_Main extends JFrame {

	/**
	 * Plant transcriptome m5C sites prediction: Feature informatio was extracted 
	 * using a position-specific matrix combined with RNA secondary structure, 
	 * where the secondary structure was calculated by RNAfold. 
	 * This tool is available for Windows, Mac and Ubuntu. If you are using 
	 * another operating system, please use the RNAfold Websever nor ViennaRNA 
	 * Package to get RNA second structure. 
	 * 
	 * @author QiangCao
	 * @value 1.0
	 * 
	 */
	private static final long serialVersionUID = 1L;
	
	private JPanel contentPane;
	private final ButtonGroup buttonGroup = new ButtonGroup();
	private String seqFilePath;
	private String strFilePath;
	private File seqFile = null;
	private File strFile = null;
	
	/**
	 * Launch the application.
	 */
	public static void main(String[] args) {
		EventQueue.invokeLater(new Runnable() {
			public void run() {
				try {
					String info = "      Plant transcriptome m5C sites prediction: Feature informatio "
								+ "\nwas extracted using a position-specific matrix combined with "
								+ "\nRNA secondary structure, where the secondary structure was "
								+ "\ncalculated by RNAfold."
								+ "\n      This tool is available for Windows, Mac and Ubuntu. If you "
								+ "\nare using another operating system, please use the RNAfold"
								+ "\nWebsever nor ViennaRNA Package to get RNA second structure.";
					JOptionPane.showConfirmDialog(null,info,"Prompt message",JOptionPane.YES_NO_OPTION);
					//main window
					Win_Main frame = new Win_Main();
					frame.setVisible(true);
					frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
					
					//delete files generated by running
					File deletFilePath = new File("result/feature.csv");
					deletFilePath.deleteOnExit();
					deletFilePath = new File("result/feature.arff");
					deletFilePath.deleteOnExit();
					deletFilePath = new File("result/feature2.arff");
					deletFilePath.deleteOnExit();
					deletFilePath = new File("RNAfold/result/seq.fasta");
					deletFilePath.deleteOnExit();
					deletFilePath = new File("RNAfold/result/str.txt");
					deletFilePath.deleteOnExit();
					deletFilePath = new File("result/forecastResPath.csv");
					deletFilePath.deleteOnExit();
					deletFilePath = new File("result/SeqStr.txt");
					deletFilePath.deleteOnExit();	
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		});
	}
	
	/**
	 * Create the frame.
	 */
	public Win_Main() {
		setTitle("PEA-2.0: Plant transcriptome m5C modification site prediction.");
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		setBounds(100, 100, 900, 600);
		contentPane = new JPanel();
		contentPane.setBackground(SystemColor.menu);
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);
		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(27, 46, 821, 162);
		contentPane.add(scrollPane);
		JTextArea textArea = new JTextArea();
		textArea.setWrapStyleWord(true);
		scrollPane.setViewportView(textArea);
		textArea.setBackground(SystemColor.text);
		textArea.setLineWrap(true);
		textArea.setRows(9);
		
		JScrollPane scrollPane_1 = new JScrollPane();
		scrollPane_1.setBounds(26, 368, 539, 138);
		contentPane.add(scrollPane_1);
		JTextArea textArea_1 = new JTextArea();
		scrollPane_1.setViewportView(textArea_1);
		textArea_1.setRows(8);
		textArea_1.setLineWrap(true);
		textArea_1.setWrapStyleWord(true);
		textArea_1.setEditable(false);
		textArea_1.setBackground(Color.WHITE);
		
		JLabel lblEnterTheSequence = new JLabel("Enter the sequence of query RNA in FASTA format.");
		lblEnterTheSequence.setBounds(27, 10, 301, 34);
		contentPane.add(lblEnterTheSequence);
		
		JLabel lblSequenceFile = new JLabel("Predict Result");
		lblSequenceFile.setBounds(29, 330, 119, 34);
		contentPane.add(lblSequenceFile);
		
		JButton btnOpenSequenceFile = new JButton("Open Sequence File");
		btnOpenSequenceFile.setBounds(635, 222, 188, 28);
		contentPane.add(btnOpenSequenceFile);
		
		JButton btnOpenStructureFile = new JButton("Open Structure File");
		btnOpenStructureFile.setBounds(635, 260, 188, 28);
		contentPane.add(btnOpenStructureFile);
		
		JRadioButton rdbtnUploadAsequenceFile = new JRadioButton("Upload a sequence File for Batch Prediction");
		buttonGroup.add(rdbtnUploadAsequenceFile);
		rdbtnUploadAsequenceFile.setBounds(37, 218, 317, 36);
		contentPane.add(rdbtnUploadAsequenceFile);
		rdbtnUploadAsequenceFile.setSelected(true);
		
		JRadioButton rdbtnUploadAstructureFile = new JRadioButton("Upload a structure File for Batch Prediction");
		buttonGroup.add(rdbtnUploadAstructureFile);
		rdbtnUploadAstructureFile.setBounds(37, 256, 317, 36);
		contentPane.add(rdbtnUploadAstructureFile);
		
		JButton btnSave = new JButton("Save m5C Sites Fragment");
		btnSave.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				JFileChooser chooser = new JFileChooser();
				FileNameExtensionFilter filter = new FileNameExtensionFilter("m5C Sites Fragment(*.txt)", "txt");
				chooser.setFileFilter(filter);
				int option = chooser.showSaveDialog(null);
				if(option==JFileChooser.APPROVE_OPTION){
					File file = chooser.getSelectedFile();	
					String fname = chooser.getName(file);
					if(fname.indexOf(".txt")==-1){
						file=new File(chooser.getCurrentDirectory(),fname+".txt");
						System.out.println("renamed");
						System.out.println(file.getName());
					}
					try {
						int byteread = 0;
						File oldFile = new File("result/SeqStr.txt");
						if(oldFile.exists()) {
							InputStream inStr = new FileInputStream(oldFile);
							FileOutputStream fos = new FileOutputStream(file);
							byte[] buffer = new byte[1444];
							while((byteread = inStr.read(buffer)) != -1) {
								fos.write(buffer, 0, byteread);
							}
							inStr.close();
							fos.close();
						}
					} catch (IOException e) {
						System.err.println("IO Exception");
						e.printStackTrace();
					}	
				}
			}
		});
		btnSave.setBounds(635, 418, 188, 28);
		contentPane.add(btnSave);
		
		JButton btnSave_1 = new JButton("Save Predict Result");
		btnSave_1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				JFileChooser chooser = new JFileChooser();
				FileNameExtensionFilter filter = new FileNameExtensionFilter("Predict Result(*.csv)", "csv");
				chooser.setFileFilter(filter);
				int option = chooser.showSaveDialog(null);
				if(option==JFileChooser.APPROVE_OPTION){
					File file = chooser.getSelectedFile();	
					String fname = chooser.getName(file);
					if(fname.indexOf(".csv")==-1){
						file=new File(chooser.getCurrentDirectory(),fname+".csv");
						System.out.println("renamed");
						System.out.println(file.getName());
					}
					try {
						int byteread = 0;
						File oldFile = new File("result/forecastResPath.csv");
						if(oldFile.exists()) {
							InputStream inStr = new FileInputStream(oldFile);
							FileOutputStream fos = new FileOutputStream(file);
							byte[] buffer = new byte[1444];
							while((byteread = inStr.read(buffer)) != -1) {
								fos.write(buffer, 0, byteread);
							}
							inStr.close();
							fos.close();
						}
					} catch (IOException e) {
						System.err.println("IO Exception");
						e.printStackTrace();
					}	
				}
			}
		});
		btnSave_1.setBounds(635, 365, 188, 28);
		contentPane.add(btnSave_1);
		
		JButton btnSave_2 = new JButton("Save Feature Data");
		btnSave_2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				JFileChooser chooser = new JFileChooser();
				FileNameExtensionFilter filter = new FileNameExtensionFilter("Feature Data(*.csv)", "csv");
				chooser.setFileFilter(filter);
				int option = chooser.showSaveDialog(null);
				if(option==JFileChooser.APPROVE_OPTION){
					File file = chooser.getSelectedFile();
					String fname = chooser.getName(file);
					if(fname.indexOf(".csv")==-1){
						file=new File(chooser.getCurrentDirectory(),fname+".csv");
						System.out.println("renamed");
						System.out.println(file.getName());
					}
					try {
						int byteread = 0;
						File oldFile = new File("result/feature.csv");
						if(oldFile.exists()) {
							InputStream inStr = new FileInputStream(oldFile);
							FileOutputStream fos = new FileOutputStream(file);
							byte[] buffer = new byte[1444];
							while((byteread = inStr.read(buffer)) != -1) {
								fos.write(buffer, 0, byteread);
							}
							inStr.close();
							fos.close();
						}
					} catch (IOException e) {
						System.err.println("IO Exception");
						e.printStackTrace();
					}	
				}
			}
		});
		btnSave_2.setBounds(635, 476, 188, 28);
		contentPane.add(btnSave_2);
		
		JButton btnClear = new JButton("Clear");
		btnClear.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				if(e.getSource()==btnClear){
					textArea.setText("");
					textArea_1.setText("");
					
					File file = new File("result/feature.csv");
				    if(file.exists()) {
				    		file.delete();
				    }
				    file = new File("result/feature.arff");
				    if(file.exists()) {
				    	file.delete();
		  			}
				    file = new File("result/feature2.arff");
				    if(file.exists()) {
				    	file.delete();
		  			}
				    file = new File("RNAfold/result/seq.fasta");
				    if(file.exists()) {
				    	file.delete();
				    }
				    file = new File("RNAfold/result/str.txt");
				    if(file.exists()) {
				    	file.delete();
				    }
				    file = new File("result/forecastResPath.csv");
				    if(file.exists()) {
				    	file.delete();
				    }
				    file = new File("result/SeqStr.txt");
				    if(file.exists()) {
				    	file.delete();
				    }
				}
			}
		});
		btnClear.setBounds(241, 298, 112, 28);
		contentPane.add(btnClear);
		
		JButton btnExample = new JButton("Sequence File Instance");
		btnExample.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String example1 = ">AT1G09760.1\n" 
						+ "AUGUCAUCUCUAGCCACUGUUGUUGUCUCUUUCCUCUGAAUGCUUAGCAGCGACAGAGCUCGACGAAGCAGUAAAACCCUAGUAGAAUAAUGG"
						+ "UGAAGCUCACGGCUGAUUUGAUCUGGAAAAGUCCUCACUUCUUCAAUGCUAUCAAGGAGCGAGAAUUGGAUC"
						+ "UACGAGGUAACAAGAUUCCUGUAAUCGAAAACUUGGGUGCUACUGAGGACCAGUUCGAUACCAUUGAUCUGUCUGAUAACGAGAUAGUUAAGC"
						+ "UAGAAAACUUCCCAUACCUCAACCGUUUAGGAACUUUACUCAUCAAUAACAAUCGUAUCACCCGGAUAAA"
						+ "UCCUAACCUUGGAGAAUUCCUACCGAAGCUUCACUCUUUGGUUCUUACAAAUAACAGGCUUGUGAAUUUGGUUGAGAUUGAUCCCCUUGCCUC"
						+ "CAUUCCCAAGCUGCAGUACCUUAGUUUGUUGGAUAAUAAUAUCACCAAAAAGGCAAAUUAUCGCCUUUAU"
						+ "GUGAUUCACAAGCUAAAAUCACUUCGAGUACUGGAUUUCAUUAAAAUCAAAGCCAAGGAGAGAGCUGAAGCUGCAUCUUUGUUUUCAUCCAAA"
						+ "GAAGCAGAAGAGGAAGUUAAAAAGGUUUCUCGGGAGGAGGUUAAAAAAGUGUCAGAAACUGCAGAAAAUC"
						+ "CAGAGACUCCGAAAGUGGUGGCGCCAACAGCGGAGCAAAUAUUAGCUAUCAAGGCUGCAAUUAUCAAUUCUCAGACGAUAGAAGAAAUUGCCA"
						+ "GACUCGAACAGGCUUUGAAGUUUGGACAGGUUCCUGCUGGCCUGAUAAUUCCUGAUCCGGCCACAAAUGA"
						+ "CUCUGCUCCCAUGGAGGAAUAGAAAGCGUGACUGUUGCCCCUCCAAUCGUUGUAGCUACUGCUCCAGAAUGCUCACAGCAAUUGUUUUCUCUG"
						+ "GCAAUCCUGUACGGUUUCUGUCACUUCCUUAGGAACUCAUGCGCAACAGUUGGAACCUGUAAACUAUUUA"
						+ "CUGCUCGAGGCAUCUGUUUUGAACCCUUAAAAAGAAUGCCAAAGAGGAUUGUAGUCUUUUUAAGUCUCUGCAUUGGCAUGGAGAGCGAGGGUG"
						+ "CACACAGAAUUUGCUUAUGCUCUUUUCGCAUUAGAAUUUCUUCUUAGUAUUUUGUAUCUUGUCACUCAAU"
						+ "AUCAUCAAUUACCGAGAAACUAAUUUAGAAAAGAAAUCACAUCGCUG\n" + 
						">AT2G36120.1\n"
						+ "ACAACUAAAUCUUAAGUAGAAAGAGUGAAACAUGGCUAAUCACAAAAAUCUCUUCUUUCUAUGUUUCUUAAUAGGUUUAGGGUUAUGUUCUGC"
						+ "UAGACGAGCACUACUCUCCUCCUCUGAAUCCGAGGCUGAAGUCGCUGCCUAUGGCGUGAAUAGUGGUUUAAG"
						+ "UGCUGGUCUUGGUGUUGGUAUUGGUGGUGGUCCUGGAGGAGGAUCUGGUUACGGAGGUGGAAGCGGUGAAGGCGGUGGAGCUGGUGGGCAUGG"
						+ "CGAGGGACAUAUUGGUGGGGGCGGAGGUGGUGGACAUGGUGGUGGUGCUGGCGGAGGAGGAGGUGGUGGC"
						+ "CCUGGAGGAGGCUACGGAGGUGGAAGCGGUGAAGGUGGUGGAGCUGGAUACGGAGGCGGAGAAGCUGGUGGGCAUGGCGGAGGUGGAGGAGGC"
						+ "GGAGCAGGCGGCGGUGGAGGUGGUGGUGGUGGUGCACAUGGUGGAGGAUACGGUGGUGGACAAGGUGCUG"
						+ "GUGCUGGAGGAGGAUAUGGAGGUGGAGGUGCCGGGGGACAUGGAGGUGGUGGAGGCGGUGGAAAUGGUGGGGGUGGAGGAGGAGGUUCUGGCG"
						+ "AAGGAGGAGCUCAUGGUGGUGGUUACGGAGCAGGAGGUGGAGCUGGAGAGGGAUACGGUGGUGGUGCUGG"
						+ "AGCUGGUGGACAUGGUGGUGGAGGAGGAGGCGGUGGUGGUUCCGGAGGUGGAGGAGGAGGAGGUGGAGGUUAUGCUGCUGCUUCUGGAUACGG"
						+ "UCACGGUGGGGGUGCUGGUGGUGGAGAAGGAAGCGGUGGCUAUGUACCAUGAAAAAUUAUCUAUAUGGAG"
						+ "UGUAACGGCAAUUGAGUGAAGUGUCAUAUCUCGUAAGGGACUAUAUAGUUUCACGAUUUAUAUGUGGCAAUAAAUAGAGUAAUCCUUCGUAUA"
						+ "AUAAGCCGUAGAAAGGCGGCUAUUGUUGAAGUUUUUAAAUUGUACCACGACCAAUAUUGUUGUAAGCUAC"
						+ "UACUACGUGUGUAUCAAGUUUUUAUAAAUGGAAAUCAUAGUUGUUCCUA\n";
				textArea.setText(example1);
				rdbtnUploadAsequenceFile.setSelected(true);
			}
		});
		btnExample.setBounds(375, 222, 174, 28);
		contentPane.add(btnExample);
		
		JButton btnStructureFileInstance = new JButton("Structure File Instance");
		btnStructureFileInstance.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				String example = "       The bracket notation for RNA secondary structures Pseudo-knot "
						+ "\nfree secondary structures can be represented in the space-efficient "
						+ "\nbracket notation. A structure on a sequence of length n is represented "
						+ "\nby a string of equal length consisting of matching brackets and dots. "
						+ "\nA base pair between base i and j is represented by a '(' at position i "
						+ "\nand a ')' at position j, unpaired bases are represented by dots. "
						+ "\n\n>AT1G09760.1"
						+ "\nAUGUCAUCUCUAGCCACUGUUGUUGUCUCUUUCCUCU"
						+ "\nGAAUGCUUAGCAGCGACAGAGCUCGACGAAGCAGUAA"
						+ "\n..((((((((.((((((((((.(((((......(((((..((((....)))).)))))...)))))))))))..";
				JOptionPane.showConfirmDialog(null,example,"Instance",JOptionPane.YES_NO_OPTION);
			}
		});
		btnStructureFileInstance.setBounds(375, 262, 174, 28);
		contentPane.add(btnStructureFileInstance);

		//menu
		JMenuBar menuBar = new JMenuBar();
		setJMenuBar(menuBar);
		JMenu mnTools = new JMenu("Tools");
		menuBar.add(mnTools);
		
		JMenuItem newItem1 = new JMenuItem("RNAfold Websever");
		newItem1.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Desktop desktop = Desktop.getDesktop();
		 		try {
					desktop.browse(new URI("http://rna.tbi.univie.ac.at/cgi-bin/RNAWebSuite/RNAfold.cgi"));
				} catch (IOException e1) {
					e1.printStackTrace();
				} catch (URISyntaxException e1) {
					e1.printStackTrace();
				}
			}
		});
		mnTools.add(newItem1);
		
		JMenuItem newItem2= new JMenuItem("RNAstructureWeb");
		newItem2.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Desktop desktop = Desktop.getDesktop();
		 		try {
					desktop.browse(new URI("http://rna.urmc.rochester.edu/RNAstructureWeb/"));
				} catch (IOException e1) {
					e1.printStackTrace();
				} catch (URISyntaxException e1) {
					e1.printStackTrace();
				}
			}
		});
		mnTools.add(newItem2);
		
		JMenuItem newItem3 = new JMenuItem("ViennaRNA Package");
		newItem3.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Desktop desktop = Desktop.getDesktop();
		 		try {
					desktop.browse(new URI("https://www.tbi.univie.ac.at/RNA/"));
				} catch (IOException e1) {
					e1.printStackTrace();
				} catch (URISyntaxException e1) {
					e1.printStackTrace();
				}
			}
		});
		mnTools.add(newItem3);
		
		JMenuItem newItem4 = new JMenuItem("weka");
		newItem4.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				Desktop desktop = Desktop.getDesktop();
		 		try {
					desktop.browse(new URI("https://www.cs.waikato.ac.nz/ml/weka/"));
				} catch (IOException e1) {
					e1.printStackTrace();
				} catch (URISyntaxException e1) {
					e1.printStackTrace();
				}
			}
		});
		mnTools.add(newItem4);
		
		JMenu mnHelp = new JMenu("Help");
		mnHelp.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				
			}
		});
		menuBar.add(mnHelp);
		
		btnOpenSequenceFile.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				JFileChooser chooser = new JFileChooser();
				chooser.setMultiSelectionEnabled(true);
				chooser.setFileSelectionMode(0);
				int value = chooser.showOpenDialog(btnOpenSequenceFile);
				chooser.cancelSelection();
				if(value == JFileChooser.APPROVE_OPTION) {
					seqFile = chooser.getSelectedFile();
					seqFilePath = seqFile.getAbsolutePath();
					rdbtnUploadAsequenceFile.setSelected(true);
				}
			}
		});
		
		btnOpenStructureFile.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				JFileChooser chooser = new JFileChooser();
				chooser.setMultiSelectionEnabled(true);
				chooser.setFileSelectionMode(0);
				int value = chooser.showOpenDialog(btnOpenStructureFile);
				chooser.cancelSelection();
				if(value == JFileChooser.APPROVE_OPTION) {
					strFile = chooser.getSelectedFile();
					strFilePath = strFile.getAbsolutePath();
					rdbtnUploadAstructureFile.setSelected(true);
				}
			}
		});
		
		/**
		 * 
		 */
		JButton btnRun = new JButton("Run");
		btnRun.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				textArea_1.setText("");
				textArea_1.paintImmediately(textArea.getBounds());
				
				ArrayList<RNA_Object> RNAlist = new ArrayList<RNA_Object>();
				ReadFile rF = new ReadFile();
				if(rdbtnUploadAsequenceFile.isSelected()) {
					RNAlist = new ArrayList<RNA_Object>();
					if(!textArea.getText().equals("")) {
						String[] seq = textArea.getText().split("\n");
						RNAlist = rF.readFasta(seq);
						try {
							rF.writeFasta(RNAlist, "RNAfold/result/seq.fasta");
						} catch (IOException e2) {
							e2.printStackTrace();
						}
					}else {
						try {
							RNAlist = rF.readFasta(seqFilePath);
						} catch (IOException e1) {
							e1.printStackTrace();
						}
						try {
							rF.writeFasta(RNAlist, "RNAfold/result/seq.fasta");
						} catch (IOException e2) {
							e2.printStackTrace();
						}
					}
					
					RunRNAfold runFold = new RunRNAfold();
					runFold.runRNAfold("result/seq.fasta", "result/str.txt");
					RNAlist = new ArrayList<RNA_Object>();
					try {
						RNAlist = rF.readSeqStr("RNAfold/result/str.txt");
					} catch (IOException e2) {
						e2.printStackTrace();
					}
				}else if(rdbtnUploadAstructureFile.isSelected()) {
					RNAlist = new ArrayList<RNA_Object>();
					try {
						RNAlist = rF.readSeqStr(strFilePath);
					} catch (IOException e1) {
						e1.printStackTrace();
					}
				}
				textArea_1.setText("Complete secondary structure calculation!");
				textArea_1.paintImmediately(textArea.getBounds());
				
				RunProgram runPro = new RunProgram();
				try {
					runPro.runGetFeature(RNAlist, "result/feature.csv");
				} catch (IOException e1) {
					e1.printStackTrace();
				}
				textArea_1.setText("Complete feature extraction!");
				textArea_1.paintImmediately(textArea.getBounds());
				
				try {
					ArrayList<ResultData> forecastResult = runPro.runWeka("result/feature.csv", 
							"result/feature.arff", "result/feature2.arff");
					for(int j=0; j<RNAlist.size(); j++) {
						CutOutSequence cos = new CutOutSequence();
						for(int i=0; i<forecastResult.size(); i++) {
							if(forecastResult.get(i).getId().equals(RNAlist.get(j).getAccessionId())) {
								RNAlist.get(j).setLocus(forecastResult.get(i).getSite());
								RNA_Object testRNA = cos.cutOutRNA(RNAlist.get(j), 15, 20);
								forecastResult.get(i).setSequence(testRNA.getSequence());
								forecastResult.get(i).setStructure(testRNA.getStructure());
							}
						}
					}
					
					textArea_1.setText("");
					int count = 0;
					for(int i=0; i<forecastResult.size(); i++) {
						if(forecastResult.get(i).getLabel().equals("Y")) {
							count++;
							StringBuffer resSB = new StringBuffer();
							resSB.append((count)+".  ");
							resSB.append(forecastResult.get(i).getId()+"\t");
							resSB.append(forecastResult.get(i).getSite()+"\t");
							resSB.append(forecastResult.get(i).getLabel()+"\t");
							resSB.append(String.format("%.3f", forecastResult.get(i).getCC())+"\n");
							textArea_1.setText(textArea_1.getText()+resSB);
							textArea_1.paintImmediately(textArea.getBounds());
						}
					}
					if(count == 0) {
						textArea_1.setText("No sites were predicted");
						textArea_1.paintImmediately(textArea.getBounds());
					}
					
					String forecastResPath = "result/forecastResPath.csv";
					File featureResultFileWrite = new File(forecastResPath);
					try {
						featureResultFileWrite.createNewFile();
					} catch (IOException e2) {
						e2.printStackTrace();
					}
					try {
						PrintWriter resultOut = new PrintWriter(
								new BufferedWriter(
										new OutputStreamWriter(
												new FileOutputStream(forecastResPath))));
						for(int i=0; i<forecastResult.size(); i++) {
							if(forecastResult.get(i).getLabel().equals("Y")) {	
								resultOut.print(forecastResult.get(i).getId()+",");
								resultOut.print(forecastResult.get(i).getSite()+",");
								resultOut.print(forecastResult.get(i).getLabel()+",");
								resultOut.print(forecastResult.get(i).getCC()+",");
								resultOut.print(forecastResult.get(i).getSequence()+",");
								resultOut.println(forecastResult.get(i).getStructure());
							}
						}
						resultOut.close();
					} catch (FileNotFoundException e1) {
						e1.printStackTrace();
					}
					
					String SeqFraPath = "result/SeqStr.txt";
					File SeqFraFileWrite = new File(SeqFraPath);
					try {
						SeqFraFileWrite.createNewFile();
					} catch (IOException e2) {
						e2.printStackTrace();
					}
					try {
						PrintWriter resultOut = new PrintWriter(
								new BufferedWriter(
										new OutputStreamWriter(
												new FileOutputStream(SeqFraPath))));
						for(int i=0; i<forecastResult.size(); i++) {
							if(forecastResult.get(i).getLabel().equals("Y")) {	
								resultOut.print(forecastResult.get(i).getId()+"-");
								resultOut.print(forecastResult.get(i).getSite()+"-");
								resultOut.println(forecastResult.get(i).getLabel());
								resultOut.println(forecastResult.get(i).getSequence());
								resultOut.println(forecastResult.get(i).getStructure());
							}
						}
						resultOut.close();
					} catch (FileNotFoundException e1) {
						e1.printStackTrace();
					}
					
				} catch (Exception e1) {
					e1.printStackTrace();
				}
			}
		});
		btnRun.setBounds(37, 298, 112, 28);
		contentPane.add(btnRun);
		
	}
}
